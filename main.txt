#include<iostream>
#include <stdio.h>
#include <queue>
#include <chrono>
#include <time.h>
#include <Windows.h>
using namespace std;

class Process {       // The class
public:             // Access specifier
	int process_id = 0; // Identificador do processo, inteiro sequencial começando em zero. 
	int bt; // Burst time variable
	int art; // Arrival time variable
	int total_time; //  tempo total de execução, aleatório dentro do intervalo (1, 20) segundos.
	string state[3] = { "Ready", "Running", "Terminated" }; // 0 = Ready ; 1 = Running ; 2 = Terminated
	int remaining_time; // Tempo de execução restante em segundos.
	int quantum;
	int randRange(int low, int high) {
		return rand() % (high - low) + low;
	}
};

int main() {
	srand(time(NULL));
	Process process;

	for (int i = 1; i <= 5; i++) {
		int state_id = 0;
		process.total_time = process.randRange(1, 20);
		process.quantum = process.randRange(1, 10);
		process.remaining_time = process.total_time;
		process.process_id = i;
		//cout << "[ P" << process.process_id << " | Status: " << process.state[state_id] << "Tempo estimado para execucao: " << process.total_time << " segundos. \n\n";
		auto start = chrono::system_clock::now();
		state_id++;
		//cout << "Processo: " << process.process_id << " | Status: " << process.state[state_id] << "\n\n";

		int dec = 0;
		while (dec < process.total_time) {
			cout << "[P:" << process.process_id << "| TR: " << process.remaining_time << "s " << "| Q: " << process.quantum << "]" << endl;
			dec++;
			process.remaining_time--;

			if (process.quantum == 0) {
				break;
			}
			process.quantum--;
			Sleep(1000);
			//system("cls");
		}

		auto end = chrono::system_clock::now();
		state_id++;
		cout << "Processo: " << process.process_id << " | Status: " << process.state[state_id] << "\n\n";

		chrono::duration<double> elapsed_seconds = end - start;

		time_t end_time = std::chrono::system_clock::to_time_t(end);
		cout << "Tempo de execucao do processo: " << elapsed_seconds.count() << " segundos. \n\n";
	}
	return 0;
}